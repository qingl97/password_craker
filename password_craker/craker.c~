#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include "mpi.h"

#define MAX_ALPHABET 128

void usage(){
  printf("Run the program in this format:\n");
  printf("./craker num_threadsPerProc PathToFileContainsAlphabet password_length password\n");
}

int main(int argc, char** argv){
  int num_procs;
  int num_threadsPerProc;
  char* alphabet;
  int alphabet_len;
  int pw_len;
  char* pw;

  if(argc != 5){
    usage();
    return EXIT_FAILURE;
  }
  
  // initialize parameters
  num_threadsPerProc = atoi(argv[1]);
  pw_len = atoi(argv[3]);
  pw = argv[4]; /* memory is allocated already! share by all the processus */
  alphabet = (char*)malloc(MAX_ALPHABET * sizeof(char)); 

  int rank;
  MPI_Init (&argc, &argv);
  MPI_Comm_rank (MPI_COMM_WORLD, &rank);
  MPI_Comm_size (MPI_COMM_WORLD, &num_procs);
  
  if(rank == 0){
    /* read from alphabet file then initialize the alphabet array */
    FILE* file_alphabet;
    file_alphabet = fopen(argv[2], "r");
    if (file_alphabet == NULL) {
      fprintf(stderr, "Can't open alphabet file %s!\n", argv[2]);
      exit(EXIT_FAILURE);
    }

    char* line = NULL;
    size_t linecap = 0;
    ssize_t linelen;
    int count = 0;
    while ((linelen = getline(&line, &linecap, file_alphabet)) > 0){
      alphabet[count] = *line;
      count++;
    }
    alphabet_len = count;
    
    fclose(file_alphabet);
  }

  MPI_Bcast(&alphabet_len, 1, MPI_INT, 0, MPI_COMM_WORLD);
  MPI_Bcast(alphabet, alphabet_len, MPI_CHAR, 0, MPI_COMM_WORLD);

  /* Main processing part */
  if(rank == 0){ // master

  }
  else{ // slave
    
  }

  free(alphabet);
  
  MPI_Finalize();

  return EXIT_SUCCESS;
}
